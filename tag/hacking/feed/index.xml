<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Hacking &#8211; Anand Chowdhary</title>
	<atom:link href="/tag/hacking/feed/" rel="self" type="application/rss+xml" />
	<link>/</link>
	<description></description>
	<lastBuildDate>Thu, 28 Dec 2017 18:11:34 +0000</lastBuildDate>
	<language>en</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>
	<generator>https://wordpress.org/?v=4.9.2</generator>
	<item>
		<title>Hacking UTwente&#8217;s PeoplePages</title>
		<link>/hacking-utwentes-peoplepages/</link>
		<pubDate>Sat, 12 Aug 2017 13:03:54 +0000</pubDate>
		<dc:creator><![CDATA[admin]]></dc:creator>
				<category><![CDATA[Blog]]></category>
		<category><![CDATA[Coffee Time]]></category>
		<category><![CDATA[Code]]></category>
		<category><![CDATA[Hacking]]></category>
		<category><![CDATA[JSON]]></category>

		<guid isPermaLink="false">/?p=289</guid>
		<description><![CDATA[As a future CreaTe student at the University of Twente, I wanted to get in touch with a particular professor. Their website, PeoplePages, uses a RESTful API for AJAX requests to search for university staff, so I decided to add everyone to my contacts. (Also makes sending LinkedIn requests to everyone much easier.) See how I did it and how they could improve their security, so others can't.]]></description>
				<content:encoded><![CDATA[<p>As a future CreaTe student at the University of Twente, I wanted to get in touch with a particular professor. Their website, <a href="https://people.utwente.nl/">PeoplePages</a>, uses a RESTful API for AJAX requests to search for university staff, so I decided to add everyone to my contacts. (Also makes sending LinkedIn requests to everyone much easier.)</p>
<p>I did a query to find all results starting with the letter &#8220;a&#8221; and got a minified JSON response with all data. Fortunately, they have unrestricted access to their endpoints. This is what it looks like when cleaned:</p>
<pre>GET https://people.utwente.nl/search?query=a</pre>
<pre>{
	"data":[
		{
			"type":"person",
			"id":"10000000000XXXX",
			"name":"John Doe",
			"jobtitle":"Supporting Staff",
			"avatar":"https://people.utwente.nl/john.doe/picture.jpg",
			"profile":"https://people.utwente.nl/john.doe",
			"organizations":[
				{
					"code":"S&amp;B-XXXX",
					"department":"S&amp;B",
					"section":"XXXX"
				}
			],
			"locations":[
				{
					"description":"Enschede 320",
					"latitude":52.23979,
					"longitude":6.850018
				}
			],
			"phones":[
				{
					"type":"",
					"tel":"+3153489XXXX",
					"prefix":"+3153489",
					"ext":"XXXX"
				}
			],
			"email":"john.doe@utwente.nl"
		}
	]
}</pre>
<p>and so on. Since empty searches, space searches, and others weren&#8217;t working, I decided to query each letter of the alphabet and save the JSON result to play with it:</p>
<pre>wget https://people.utwente.nl/search?query={a..z}</pre>
<p>I soon realized that this wouldn&#8217;t work because the API restricts the number of results to 50, but this would:</p>
<pre>wget https://people.utwente.nl/search?query={a..z}{a..z}</pre>
<p>This goes through every combination in the alphabet: aa, ab, ac . . . zx, zy, zz, and downloads the JSON file. This was enough, but in many combinations, there were no results, so the empty JSON file was exactly 43 bytes. I then got rid of those files:</p>
<pre>find . -name "*" -size 43c -delete</pre>
<p>This Bash command finds all files that are of 43 bytes in size and deletes them. Note that if I just filter the size in bytes and query something like <code>-size 43 -delete</code>, it <a href="https://superuser.com/a/644274">interprets it as</a> 43*512 bytes, so the POSIX requirement states &#8220;c&#8221; for bytes.</p>
<p>Finally I concatenated all the JSON files to one giant 4.9 MB file.</p>
<pre class="p1"><span class="s1">cat * &gt; contacts.json</span></pre>
<p>After cleaning the file, removing business contacts, and generally playing with the JSON content, I have a directory of 7527 people including duplicates. Sublime Text can handle this for me, with the simple command: Edit -&gt; Permute Lines -&gt; Unique. I now have 3740 people.</p>
<p>Then, I clean up by replacing double space with single, change the &#8220;Surname, Firstname&#8221; format to &#8220;Firstname Surname&#8221;, and saved the contacts in a CSV file.</p>
<p>Simple enough, but I now have the phone numbers, email addresses, and office addresses of all my professors, the Dean, and other important contacts for the university. Simple enough.</p>
<h3>Security</h3>
<p>The simple way to prevent this is to have secured API endpoints. There are many ways to do that &#8212; token-based authentication for each user with rate limiting, or even CORS prevention.</p>
<p><img class="alignnone size-full wp-image-304" src="https://www.accessibility.technology/websites/anand/anandchowdhary.com/wp-content/uploads/2017/08/Screen-Shot-2017-08-12-at-6.32.24-PM.png" alt="" width="1273" height="833" srcset="/wp-content/uploads/2017/08/Screen-Shot-2017-08-12-at-6.32.24-PM.png 1273w, /wp-content/uploads/2017/08/Screen-Shot-2017-08-12-at-6.32.24-PM-300x196.png 300w, /wp-content/uploads/2017/08/Screen-Shot-2017-08-12-at-6.32.24-PM-768x503.png 768w, /wp-content/uploads/2017/08/Screen-Shot-2017-08-12-at-6.32.24-PM-1024x670.png 1024w" sizes="(max-width: 1273px) 100vw, 1273px" /></p>
]]></content:encoded>
			</item>
	</channel>
</rss>
